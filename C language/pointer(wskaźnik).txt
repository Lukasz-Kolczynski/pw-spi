/*#include <stdio.h>

void swap(int v, int w){
    int tmp;
    tmp= v;
    v=w;
    w=tmp;
}

void swapNew(int *v, int *w){
    int tmp;
    tmp= *v;
    *v=*w;
    *w=tmp;
}


int main(void)
{
    int x = 2;
    int y = 5;
    
    int *pointer;
    pointer= &x;
    printf("%d %d %d\n", x, y, *pointer);
    
    pointer = &y;
    
    printf("%d %d %d\n", x, y, *pointer);
        
    *pointer = 123;
    
    printf("%d %d %d\n", x, y, *pointer);
        
    swap (x,y);
    
    printf("%d %d %d\n", x, y, *pointer);
    
    swapNew(&x,&y);
    
    printf("%d %d %d\n", x, y, *pointer);
    
    
    
    return 0;
}
*/ 


#include <stdio.h>

int main (int argc, char **argv){
    
    printf("Liczba argumentow: %d\n",argc);
    
    for(int i = 0; i<argc; i++){
        
        printf("argument %d: %s\n",i, argv[i]);
    }
    
    
    
    return 0;
}


#include <stdio.h>
int main (void) {
int tab[3] = {3,5,7};
int *p;

printf("%d\n", tab[0]);
printf("%d\n", *tab);
p= tab;
printf("%d\n", tab[1]);
printf("%d\n", *(tab+1));
printf("%d\n", *(p++));


return 0;
} *ta



./a.out 5 <-- wielkosc tablicy i ile elementow uzytkownik musi podac



#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
int size;
int *tab;
if (argc< 2){
        printf("za mało argumentów\n");
        printf("Poprawne wywołanie:\n");
        printf("NAZWA_PROGRAMU LICZBA_NATURALNA\n");
        return -1;
}

size =atoi(argv[1]);
tab = malloc(sizeof(int)*size);
for (int i = 0; i < size; i++){
printf("Podaj element %d: ",i);
scanf("%d", &(tab[i]));
}
for (int i =0; i < size; i++){
        printf("%d", tab[i]);
}
free(tab);
return 0;
}


struktura student imie nazwisko ocena
wpisanie studenta s1 
dodanie go do listy studentow z ich ocenami itp,
zapisanie tej listy z nowymi studentami, spytanie o kolejnego studenta 
(Y/N jesli Y to dodanie kolejnego studenta do tabeli z poprzednimi studentami
N spytanie o edycje biezacego studenta (jego ocen itp) Y/N jesli Y edycja danych jesli N zakoncz)
spytanie o edycje studenta jego ocen 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXSTUDENTS 100
#define MAXNAMELENGTH 50

typedef struct {
char name[MAXNAMELENGTH];
int grade;
} Student;

typedef struct {
Student students[MAXSTUDENTS];
int count;
} StudentList;

void addStudent(StudentList list, char name, int grade) {
if (list->count < MAX_STUDENTS) {
strcpy(list->students[list->count].name, name);
list->students[list->count].grade = grade;
list->count++;
printf("Student %s added with grade %d\n", name, grade);
} else {
printf("Cannot add more students, list is full\n");
}
}

void removeStudent(StudentList list, char name) {
for (int i = 0; i < list->count; i++) {
if (strcmp(list->students[i].name, name) == 0) {
for (int j = i; j < list->count - 1; j++) {
list->students[j] = list->students[j + 1];
}
list->count--;
printf("Student %s removed\n", name);
return;
}
}
printf("Student %s not found\n", name);
}

void editGrade(StudentList list, char name, int newGrade) {
for (int i = 0; i < list->count; i++) {
if (strcmp(list->students[i].name, name) == 0) {
list->students[i].grade = newGrade;
printf("Grade for student %s edited to %d\n", name, newGrade);
return;
}
}
printf("Student %s not found\n", name);
}

int main() {
StudentList list = { .count = 0 };

addStudent(&list, "Alice", 85);
addStudent(&list, "Bob", 90);

editGrade(&list, "Alice", 88);

removeStudent(&list, "Bob");

return 0;
}
