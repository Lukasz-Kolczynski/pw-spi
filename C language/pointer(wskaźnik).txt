/*#include <stdio.h>

void swap(int v, int w){
    int tmp;
    tmp= v;
    v=w;
    w=tmp;
}

void swapNew(int *v, int *w){
    int tmp;
    tmp= *v;
    *v=*w;
    *w=tmp;
}


int main(void)
{
    int x = 2;
    int y = 5;
    
    int *pointer;
    pointer= &x;
    printf("%d %d %d\n", x, y, *pointer);
    
    pointer = &y;
    
    printf("%d %d %d\n", x, y, *pointer);
        
    *pointer = 123;
    
    printf("%d %d %d\n", x, y, *pointer);
        
    swap (x,y);
    
    printf("%d %d %d\n", x, y, *pointer);
    
    swapNew(&x,&y);
    
    printf("%d %d %d\n", x, y, *pointer);
    
    
    
    return 0;
}
*/ 


#include <stdio.h>

int main (int argc, char **argv){
    
    printf("Liczba argumentow: %d\n",argc);
    
    for(int i = 0; i<argc; i++){
        
        printf("argument %d: %s\n",i, argv[i]);
    }
    
    
    
    return 0;
}


#include <stdio.h>
int main (void) {
int tab[3] = {3,5,7};
int *p;

printf("%d\n", tab[0]);
printf("%d\n", *tab);
p= tab;
printf("%d\n", tab[1]);
printf("%d\n", *(tab+1));
printf("%d\n", *(p++));


return 0;
} *ta



./a.out 5 <-- wielkosc tablicy i ile elementow uzytkownik musi podac



#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
int size;
int *tab;
if (argc< 2){
        printf("za mało argumentów\n");
        printf("Poprawne wywołanie:\n");
        printf("NAZWA_PROGRAMU LICZBA_NATURALNA\n");
        return -1;
}

size =atoi(argv[1]);
tab = malloc(sizeof(int)*size);
for (int i = 0; i < size; i++){
printf("Podaj element %d: ",i);
scanf("%d", &(tab[i]));
}
for (int i =0; i < size; i++){
        printf("%d", tab[i]);
}
free(tab);
return 0;
}


struktura student imie nazwisko ocena
wpisanie studenta s1 
dodanie go do listy studentow z ich ocenami itp,
zapisanie tej listy z nowymi studentami, spytanie o kolejnego studenta 
(Y/N jesli Y to dodanie kolejnego studenta do tabeli z poprzednimi studentami
N spytanie o edycje biezacego studenta (jego ocen itp) Y/N jesli Y edycja danych jesli N zakoncz)
spytanie o edycje studenta jego ocen 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXSTUDENTS 100
#define MAXNAMELENGTH 50

typedef struct {
char name[MAXNAMELENGTH];
int grade;
} Student;

typedef struct {
Student students[MAXSTUDENTS];
int count;
} StudentList;

void addStudent(StudentList list, char name, int grade) {
if (list->count < MAX_STUDENTS) {
strcpy(list->students[list->count].name, name);
list->students[list->count].grade = grade;
list->count++;
printf("Student %s added with grade %d\n", name, grade);
} else {
printf("Cannot add more students, list is full\n");
}
}

void removeStudent(StudentList list, char name) {
for (int i = 0; i < list->count; i++) {
if (strcmp(list->students[i].name, name) == 0) {
for (int j = i; j < list->count - 1; j++) {
list->students[j] = list->students[j + 1];
}
list->count--;
printf("Student %s removed\n", name);
return;
}
}
printf("Student %s not found\n", name);
}

void editGrade(StudentList list, char name, int newGrade) {
for (int i = 0; i < list->count; i++) {
if (strcmp(list->students[i].name, name) == 0) {
list->students[i].grade = newGrade;
printf("Grade for student %s edited to %d\n", name, newGrade);
return;
}
}
printf("Student %s not found\n", name);
}

int main() {
StudentList list = { .count = 0 };

addStudent(&list, "Alice", 85);
addStudent(&list, "Bob", 90);

editGrade(&list, "Alice", 88);

removeStudent(&list, "Bob");

return 0;
}




#include <stdio.h>
#include <stdlib.h>

enum InfoCode {ERROR, SUCCESS};

struct Info {
        enum InfoCode code;
};

struct DynamicTable{
        unsigned int size;
        unsigned int idx;
        int *elements;
};

void printDynamicTable(struct DynamicTable table){
        int i;
        printf("size: %u, last element index: %u\n", table.size, table.idx);
        for (i=0; i<=table.idx; i++){
                printf("[%02d]: %d\n", i, table.elements[i]);
        }
}

void printMessage(struct Info info){
        switch (info.code) {
                case ERROR:
                        printf("Error\n");
                        break;
                case SUCCESS:
                        printf("Success\n");
                        break;
                default:
                        printf("Unknown message\n");
                break;
        }
}



struct Info addElement(struct DynamicTable *table, int element){
        int *newTable;
        int i;
        struct Info info = {SUCCESS};

        //printf("%d\n", (*table).size);
        //printf("%d\n", table->size);
        if (table -> size == 0){
                table -> elements = malloc (sizeof(int) * 1);
                if (table -> elements == NULL) {
                        info.code = ERROR;
                        return info;
                }
                table -> size = 1;
                table -> idx = 0;
                (table -> elements)[table ->idx] = element;
        } else {
        if (table -> idx<(table ->size)-1 ) {
                table -> idx += 1;
        (table -> elements)[table -> idx] = element;
        }else {
        newTable= malloc(sizeof(int)*(table->size)*2);
        for(i = 0; i<table->size; i++){
                newTable[i] = table -> elements[i];

        }
        table->size *=2;
        table ->idx += 1;
        free(table->elements);
        table->elements =newTable;
        (table-> elements)[table->idx] = element;

        }

        }
        return info;
}





int main(void){
        struct DynamicTable tab= {0,0,NULL};
        struct Info result;
        result = addElement(&tab, 3);
        printMessage(result);
        printDynamicTable(tab);
        result = addElement(&tab, 5);
        printMessage(result);
        printDynamicTable(tab);
        result = addElement(&tab, 7);
        printMessage(result);
        printDynamicTable(tab);
        result = addElement(&tab, 9);
        printMessage(result);
        printDynamicTable(tab);
        result = addElement(&tab, 11);
        printMessage(result);
        printDynamicTable(tab);
        return 0;
}


----------zapis/odczyt------------

#include <stdio.h>
//;
#include <stdlib.h>

int main(void) {
  FILE *fileIn, *fileOut;
  char c;

  fileIn= fopen("dane.txt", "rt");
  fileOut = fopen ("out.txt", "wt");
  if (fileIn == NULL || fileOut == NULL) {
    printf("File error\n");
    return 1;
}



while ( !feof(fileIn) ){
  c = fgetc(fileIn);
  //fputc(c, fileOut);
  if (feof(fileIn)){
    break;
}
  putc(c, stdout);
  fputc(c, fileOut);
}


  //fread(&c,sizeof(char),1,fileIn);
  //putc(c,stdout);

  fclose(fileIn);
  fclose(fileOut);
  return 0;
}




---------ZADANIE_1----------

#Program wywoływany z linii poleceń
#Format wywołania:
#program MIN MAX NUMBER FILE
#Wylosowac NUMBER liczb z przedzialu [MIN, MAX] i zapisac do FILE.



#include <stdio.h>
#include <stdlib.h>
#include <time.h>



int generateRandom (int min, int max) {
  return min + rand() % (max - min +1);
}

void saveRandom(int min, int max, int number, char *filename) {
  FILE *file = fopen(filename, "w");
  if (file == NULL) {
  printf("Nie można otworzyć pliku\n");
  exit(1);
}
srand(time(NULL));
for (int i = 0; i < number; i++){
  int randNum= generateRandom(min, max);
  fprintf(file, "%d", randNum);
}
fclose(file);
}

int main (int argc, char *argv[]){
  if (argc!= 5){
    printf("Za mało lub za dużo argumentów\n");
    printf("Poprawny format: MN MAX NUMBER FILE/n");
    return 1;
}
int min = atoi(argv[1]);
int max = atoi(argv[2]);
int number = atoi(argv[3]);
char *filename = argv[4];

saveRandom(min,max,number,filename);
printf("Wylosowano %d liczb z przedziału [%d ,%d] i zapisano do pliku %s.\n",number,min,max,filename);

return 0;
}


#gcc zadanie1.c
#./a.out 1 5 10 test.txt
#cat test.txt




--------ZADANIE_2-----------

#Program wywoływany z linii poleceń
#Format wywołania:
#program FILE ACTION
#ACTION: sum - policzyć sumę liczb z pliku FILE
         avg - policzyc średną liczb z pliku FILE
#Wynik działania wyprowadzić na standardowe wyjście (ekran)


